# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Stephen Phillips
Student ID: 503888079
Email: chengduscp@ucla.edu

# Partner 2 (if you're working in a team)
Name: Andy Huange
Student ID: 503885009
Email: andy.huang0692@gmail.com

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)
We used forking off processes, first doing all the downloads then doing all
the uploads

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)
If a peer sent a filename that was way too long, like a kilobyte, the peer's
file information would crash and the peer would hang and not recieve any more
requests.

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)
In the original code, there was no tracking for where the file went, so a 
hostile peer could get files not in the peers working directory. So now it
parses the file string and make sure it never goes anywhere above the working
directory of the peer.

# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)

# Extra credit problems
#Extra credit problem: none

# Add any other information you'd like us to know below this line.
